# Job execution time - Each job in a workflow can run for up to 6 hours of execution time.
# Workflow run time - Each workflow run is limited to 35 days

name: windows

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

defaults:
  run:
    shell: msys2 {0}

# each job runs under a NEW image
jobs:
  should_run:
    runs-on: ubuntu-latest
    name: should_i_run
    outputs:
      output1: ${{ steps.check.outputs.target_commit_id }}
    steps:
     - name: check
       run: |
         wget https://gist.github.com/mgood7123/47957c59a4b0cbda11875632ee0b8f15/raw/7e876a60f2735cf7e60150a9a29edf6ddaad20a8/check.cpp -O check.cpp
         cat << EOF > data.json
         ${{toJSON(github.event.commits.*)}}
         EOF
         cat -n data.json
         git clone https://github.com/danielaparker/jsoncons --depth=1
         g++ --std=c++17 -I jsoncons/include check.cpp -o check
         ./check 2 >> "$GITHUB_OUTPUT" # check for android [1] windows [2] linux [3] windows [4]
       shell: bash
  
#  msys2_build_split:
#    needs: should_run
#    # so we can upload releases
#    permissions:
#      contents: write
#    concurrency:
#      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
#      cancel-in-progress: true
#    strategy:
#      matrix:
#        include:
#          - os: windows-latest
#            name: windows
#            sys: MSYS
#
#    runs-on: ${{ matrix.os }}
#
#    name: msys2 split - ${{ matrix.name }}
#
#    steps:
#      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#      - uses: actions/checkout@v4
#        with:
#          ref: ${{needs.should_run.outputs.output1}}
#          submodules: recursive
#
#      - name: '${{ matrix.icon }} Setup MSYS2'
#        uses: msys2/setup-msys2@v2
#        with:
#          msystem: ${{matrix.sys}}
#          update: true
#          path-type: strict
#
#      - name: update packages
#        run: |
#          pacman -Sy
#
#      - name: install packages
#        run: |
#          pacman -S --noconfirm --needed git gcc make cmake ninja python autotools
#
##'sh' '-c' 'export PKG_CONFIG_PATH="$(pwd)/ROOTFS/lib/pkgconfig:$(pwd)/ROOTFS/share/pkgconfig:$PKG_CONFIG_PATH" ; export CC="/usr/bin/clang.exe" ; export LDFLAGS="-L$(pwd)/ROOTFS/lib" ; export CFLAGS="-I$(pwd)/ROOTFS/include -L$(pwd)/ROOTFS/lib   -g0 -O3" ; export CXX="/usr/bin/clang++.exe" ; export CXXFLAGS="-I$(pwd)/ROOTFS/include -L$(pwd)/ROOTFS/lib   -g0 -O3" ; sh ./configure   --prefix=$(pwd)/ROOTFS --enable-static=yes --enable-shared=no'
##'sh' '-c' 'export PKG_CONFIG_PATH="$(pwd)/ROOTFS/lib/pkgconfig:$(pwd)/ROOTFS/share/pkgconfig:$PKG_CONFIG_PATH" ; export CC="/usr/bin/clang.exe" ; export LDFLAGS="-L$(pwd)/ROOTFS/lib" ; export CFLAGS="-I$(pwd)/ROOTFS/include -L$(pwd)/ROOTFS/lib   -g0 -O3" ; export CXX="/usr/bin/clang++.exe" ; export CXXFLAGS="-I$(pwd)/ROOTFS/include -L$(pwd)/ROOTFS/lib   -g0 -O3" ; make --trace'
#
#      - name: check if split program is cached
#        run: |
#          export MSYS=winsymlinks:native
#          cd split
#          chmod +x ../try_get_release.sh
#          ../try_get_release.sh   mgood7123   qemu_app   storage--split--windows   split_build.tar || true
#
#      - name: build split program
#        run: |
#          export MSYS=winsymlinks:native
#          export CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)
#          chmod +x try_get_release.sh
#          cd split
#          chmod +x make.sh
#          ./make.sh
#
#      - name: archive split build directory
#        run: |
#          export MSYS=winsymlinks:native
#          cd split
#          # we need only the rootfs in the next stage
#          cp /usr/bin/msys-2.0.dll BUILD_DEBUG/BUILD_ROOT/ROOTFS/bin
#          mv BUILD_DEBUG/BUILD_ROOT/ROOTFS .
#          tar -cf split_build.tar BUILD_DEBUG
#          sha512sum split_build.tar > split_build.tar.sha512
#          rm -rf BUILD_DEBUG
#          # preserve the directory structure
#          mkdir BUILD_DEBUG
#          mkdir BUILD_DEBUG/BUILD_ROOT
#          mv ROOTFS BUILD_DEBUG/BUILD_ROOT
#          tar -cf split_rootfs.tar BUILD_DEBUG
#          sha512sum split_rootfs.tar > split_rootfs.tar.sha512
#          cd ..
#          mkdir split_exe
#          cp split/BUILD_DEBUG/BUILD_ROOT/ROOTFS/bin/split.exe split_exe
#          cp /usr/bin/msys-2.0.dll split_exe
#          tar -cf split.exe.tar split_exe
#          sha512sum split.exe.tar > split.exe.tar.sha512
#          rm -rf split/BUILD_DEBUG
#          rm -rf split_exe
#          tar -xf split.exe.tar
#          echo "checking if packaged split.exe works"
#          ./split_exe/split.exe
#          echo "packaged split.exe works"
#
#      - name: list files
#        run: |
#          ls -l
#      
#      - name: upload split build directory
#        if: success() # if we cancel during the upload, wait for it to complete
#        uses: "ncipollo/release-action@v1"
#        with:
#          name: "split"
#          tag: "storage--split--windows"
#          makeLatest: true
#          generateReleaseNotes: false
#          allowUpdates: true
#          artifactErrorsFailBuild: true
#          replacesArtifacts: true
#          removeArtifacts: true
#          artifacts: |
#            ./split/split_build.tar
#            ./split/split_build.tar.sha512
#            ./split/split_rootfs.tar
#            ./split/split_rootfs.tar.sha512
#            ./split.exe.tar
#            ./split.exe.tar.sha512
#
  build_qemu:
#    needs: msys2_build_split
    needs: should_run
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MINGW64

    runs-on: ${{ matrix.os }}

    name: build qemu - ${{ matrix.name }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          submodules: recursive

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          chmod +x ./try_get_release.sh
          ./try_get_release.sh   mgood7123   qemu_app   storage--split--windows   split.exe.tar

      - name: unpack alpine
        run: |
          ./unpack.sh
          cd alpine
          ls -l
          chmod -v +x *.sh

      - name: install qemu
        run: |
          pacman -S --noconfirm --needed pactoys sshpass rsync
          pacboy -S --noconfirm --needed qemu:p qemu-common:p qemu-guest-agent:p qemu-image-util:p

      - name: poweron alpine
        run: |
          cd alpine
          . ./poweron_alpine.sh

      - name: copy qemu to alpine
        run: |
          cd alpine
          ./exe.sh mkdir qemu
          ./push.sh ../CMakeLists.txt qemu
          ./push.sh ../build_root.cmake qemu
          ./push.sh ../restore_symlinks.sh qemu
          ./push.sh ../try_get_release.sh qemu
          ./push.sh ../split qemu
          ./push.sh ../qemu qemu

      - name: install qemu deps
        run: |
          # https://github.com/qemu/qemu/blob/master/.gitlab-ci.d/windows.yml#L84
          cd alpine
          ./exe.sh sudo apk add bison flex git
          ./exe.sh sudo apk add make cmake gcc meson autotools ninja python python-sphinx python-sphinx_rtd_theme tools-git angleproject capstone curl cyrus-sasl dtc expat fontconfig freetype fribidi gcc-libs gdk-pixbuf2 gettext glib2 gmp gnutls graphite2 gst-plugins-base gstreamer gtk3 harfbuzz jbigkit lerc libc++ libdatrie libdeflate libepoxy libffi libiconv libidn2 libjpeg-turbo libnfs libpng libpsl libslirp libssh libssh2 libtasn1 libthai libtiff libunistring libunwind libusb libwebp libwinpthread-git lz4 lzo2 nettle openssl opus orc p11-kit pango pixman SDL2 SDL2_image snappy spice usbredir xz zlib zstd brotli bzip2 nghttp2 diffutils grep make sed binutils capstone curl cyrus-sasl dtc gcc glib2 gnutls gtk3 libgcrypt libjpeg-turbo libnfs libpng libssh libtasn1 libusb lzo2 nettle ninja pixman pkgconf python SDL2 SDL2_image snappy spice usbredir zstd

      - name: restore symlinks
        run: |
          export MSYS=winsymlinks:native
          cd alpine
          ./exe.sh bash -c "cd qemu ; chmod +x restore_symlinks.sh"
          ./exe.sh bash -c "cd qemu ; ./restore_symlinks.sh"

      - name: configure qemu - Release
        run: |
          export MSYS=winsymlinks:native
          cd alpine
          ./exe.sh bash -c "cd qemu/qemu ; mkdir qemu/BUILD ; mkdir BUILD/BUILD_ROOT
          ./exe.sh bash -c "cd qemu/qemu/BUILD ; ../configure --prefix=\$(pwd)/BUILD_ROOT --enable-sdl --enable-gtk --disable-user --target-list=x86_64-softmmu --enable-whpx"

      - name: build qemu - Release
        run: |
          export MSYS=winsymlinks:native
          cd alpine
          ./exe.sh bash -c "cd qemu/qemu/BUILD ; make --trace -j \$(nproc)"

      - name: install qemu - Release
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cd alpine
          ./exe.sh bash -c "cd qemu/qemu/BUILD ; make install"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cd alpine
          ./pull.sh qemu/qemu/BUILD/BUILD_ROOT
          cd ..
          ./split_exe/split.exe --split -r alpine/BUILD_ROOT --name rootfs --size $((1024*1024*500))

      - name: powerff alpine
        run: |
          cd alpine
          ./poweroff_alpine.sh

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "qemu - windows - RELEASE"
          tag: "storage--qemu--windows--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./rootfs.split.*
