# Job execution time - Each job in a workflow can run for up to 6 hours of execution time.
# Workflow run time - Each workflow run is limited to 35 days

name: windows

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

defaults:
  run:
    shell: msys2 {0}

# each job runs under a NEW image
jobs:
  should_run:
    runs-on: ubuntu-latest
    name: should_i_run
    outputs:
      output1: ${{ steps.check.outputs.target_commit_id }}
    steps:
     - name: check
       run: |
         wget https://gist.github.com/mgood7123/47957c59a4b0cbda11875632ee0b8f15/raw/7e876a60f2735cf7e60150a9a29edf6ddaad20a8/check.cpp -O check.cpp
         cat << EOF > data.json
         ${{toJSON(github.event.commits.*)}}
         EOF
         cat -n data.json
         git clone https://github.com/danielaparker/jsoncons --depth=1
         g++ --std=c++17 -I jsoncons/include check.cpp -o check
         ./check 2 >> "$GITHUB_OUTPUT" # check for android [1] windows [2] linux [3] windows [4]
       shell: bash
  
  msys2_build_split:
    needs: should_run
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MSYS

    runs-on: ${{ matrix.os }}

    name: msys2 split - ${{ matrix.name }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          submodules: recursive

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install git
        run: |
          pacman -S --noconfirm --needed git

      - name: install gcc
        run: |
          pacman -S --noconfirm --needed gcc

      - name: install makefile
        run: |
          pacman -S --noconfirm --needed make

      - name: install cmake
        run: |
          pacman -S --noconfirm --needed cmake

      - name: install autotools
        run: |
          pacman -S --noconfirm --needed autotools

#'sh' '-c' 'export PKG_CONFIG_PATH="$(pwd)/ROOTFS/lib/pkgconfig:$(pwd)/ROOTFS/share/pkgconfig:$PKG_CONFIG_PATH" ; export CC="/usr/bin/clang.exe" ; export LDFLAGS="-L$(pwd)/ROOTFS/lib" ; export CFLAGS="-I$(pwd)/ROOTFS/include -L$(pwd)/ROOTFS/lib   -g0 -O3" ; export CXX="/usr/bin/clang++.exe" ; export CXXFLAGS="-I$(pwd)/ROOTFS/include -L$(pwd)/ROOTFS/lib   -g0 -O3" ; sh ./configure   --prefix=$(pwd)/ROOTFS --enable-static=yes --enable-shared=no'
#'sh' '-c' 'export PKG_CONFIG_PATH="$(pwd)/ROOTFS/lib/pkgconfig:$(pwd)/ROOTFS/share/pkgconfig:$PKG_CONFIG_PATH" ; export CC="/usr/bin/clang.exe" ; export LDFLAGS="-L$(pwd)/ROOTFS/lib" ; export CFLAGS="-I$(pwd)/ROOTFS/include -L$(pwd)/ROOTFS/lib   -g0 -O3" ; export CXX="/usr/bin/clang++.exe" ; export CXXFLAGS="-I$(pwd)/ROOTFS/include -L$(pwd)/ROOTFS/lib   -g0 -O3" ; make --trace'

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          cd split
          chmod +x ../try_get_release.sh
          ../try_get_release.sh   mgood7123   qemu_app   storage--split--windows   split_build.tar || true

      - name: build split program
        run: |
          export MSYS=winsymlinks:native
          export CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)
          chmod +x try_get_release.sh
          cd split
          chmod +x make.sh
          ./make.sh

      - name: archive split build directory
        run: |
          export MSYS=winsymlinks:native
          cd split
          # we need only the rootfs in the next stage
          cp /usr/bin/msys-2.0.dll BUILD_DEBUG/BUILD_ROOT/ROOTFS/bin
          mv BUILD_DEBUG/BUILD_ROOT/ROOTFS .
          tar -cf split_build.tar BUILD_DEBUG
          sha512sum split_build.tar > split_build.tar.sha512
          rm -rf BUILD_DEBUG
          # preserve the directory structure
          mkdir BUILD_DEBUG
          mkdir BUILD_DEBUG/BUILD_ROOT
          mv ROOTFS BUILD_DEBUG/BUILD_ROOT
          tar -cf split_rootfs.tar BUILD_DEBUG
          sha512sum split_rootfs.tar > split_rootfs.tar.sha512
          cd ..
          mkdir split_exe
          cp split/BUILD_DEBUG/BUILD_ROOT/ROOTFS/bin/split.exe split_exe
          cp /usr/bin/msys-2.0.dll split_exe
          tar -cf split.exe.tar split_exe
          sha512sum split.exe.tar > split.exe.tar.sha512
          rm -rf split/BUILD_DEBUG
          rm -rf split_exe
          tar -xf split.exe.tar
          echo "checking if packaged split.exe works"
          ./split_exe/split.exe
          echo "packaged split.exe works"

      - name: list files
        run: |
          ls -l
      
      - name: upload split build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "split"
          tag: "storage--split--windows"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./split/split_build.tar
            ./split/split_build.tar.sha512
            ./split/split_rootfs.tar
            ./split/split_rootfs.tar.sha512
            ./split.exe.tar
            ./split.exe.tar.sha512

  build_qemu:
    needs: msys2_build_split
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MINGW64

    runs-on: ${{ matrix.os }}

    name: build qemu - ${{ matrix.name }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          submodules: recursive

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: list
        run: |
          ls -l $(cygpath -w /)

      - name: list
        run: |
          ls -l $(cygpath -w /)usr/lib

      - name: update packages
        run: |
          pacman -Sy

      - name: install qemu deps
        run: |
          # https://github.com/qemu/qemu/blob/master/.gitlab-ci.d/windows.yml#L84
          pacman -S --noconfirm --needed cmake mingw-w64-x86_64-gcc mingw-w64-x86_64-meson bison diffutils flex git grep make sed mingw-w64-x86_64-binutils mingw-w64-x86_64-capstone mingw-w64-x86_64-curl mingw-w64-x86_64-cyrus-sasl mingw-w64-x86_64-dtc mingw-w64-x86_64-gcc mingw-w64-x86_64-glib2 mingw-w64-x86_64-gnutls mingw-w64-x86_64-gtk3 mingw-w64-x86_64-libgcrypt mingw-w64-x86_64-libjpeg-turbo mingw-w64-x86_64-libnfs mingw-w64-x86_64-libpng mingw-w64-x86_64-libssh mingw-w64-x86_64-libtasn1 mingw-w64-x86_64-libusb mingw-w64-x86_64-lzo2 mingw-w64-x86_64-nettle mingw-w64-x86_64-ninja mingw-w64-x86_64-pixman mingw-w64-x86_64-pkgconf mingw-w64-x86_64-python mingw-w64-x86_64-SDL2 mingw-w64-x86_64-SDL2_image mingw-w64-x86_64-snappy mingw-w64-x86_64-spice mingw-w64-x86_64-usbredir mingw-w64-x86_64-zstd

      - name: verify /mingw64/bin/gcc.exe exists
        run: |
          ls -l /mingw64/bin/gcc.exe

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          chmod +x ./try_get_release.sh
          ./try_get_release.sh   mgood7123   qemu_app   storage--split--windows   split.exe.tar

      - name: check if build directory is cached
        run: |
          export MSYS=winsymlinks:native

          URL=https://github.com/mgood7123/qemu_app/releases/download/storage--qemu--windows--release/build.split.map
          ./split_exe/split.exe --join -r $URL --out BUILD_RELEASE_GCC || true

      - name: cmake configure qemu - Release
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)
          cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S . -B BUILD_RELEASE_GCC

      - name: cmake build qemu - Release
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)
          cmake --build BUILD_RELEASE_GCC

      - name: cmake install qemu - Release
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)
          cmake --install BUILD_RELEASE_GCC

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_GCC/BUILD_ROOT/ROOTFS --name rootfs --size 750000000

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_GCC --name build --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "qemu - windows - RELEASE"
          tag: "storage--qemu--windows--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build.split.*
            ./rootfs.split.*
